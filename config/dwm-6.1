/* See LICENSE file for copyright and license details. */

/* appearance */
static const char *fonts[]               = {
	"Inconsolata for Powerline:size=8"
};
static const char dmenufont[]            = "Inconsolata for Powerline:size=8";
static const char normbordercolor[]      = "#444444";
static const char normbgcolor[]          = "#222222";
static const char normfgcolor[]          = "#bbbbbb";
static const char selbordercolor[]       = "#005577";
static const char selbgcolor[]           = "#005577";
static const char selfgcolor[]           = "#eeeeee";
static const unsigned int borderpx       = 1;     /* border pixel of windows */
static const unsigned int snap           = 32;    /* snap pixel */
static const int showbar                 = 1;     /* 0 means no bar */
static const int topbar                  = 1;     /* 0 means bottom bar */
static const unsigned int systraypinning = 0;     /* 0: sloppy systray follows selected monitor, >0: pin systray to monitor X */
static const unsigned int systrayspacing = 2;     /* systray spacing */
static const Bool systraypinningfailfirst= True;  /* True: if pinning fails, display systray on the first monitor, False: display systray on the last monitor*/
static const Bool showsystray            = True;  /* False means no systray */

/* tagging */
static const char *tags[] = { "sys",   "www", "mail",
                              "media", "irc", "var",
                              "bin",   "img", "dev" };

static const Rule rules[] = {
  /* class                        instance    title       tags mask     isfloating   monitor */
  { "Gimp",                       NULL,       NULL,       0,            True,        -1 },
  { "Firefox",                    NULL,       NULL,       1 << 1,       False,       -1 },
  { "Skype",                      NULL,       NULL,       1 << 4,       False,       -1 },
  { "mpv",                        NULL,       NULL,       1 << 3,       False,       -1 },
  { "gl",                         NULL,       NULL,       1 << 3,       False,       -1 },
  { "MuPDF",                      NULL,       NULL,       1 << 3,       False,       -1 },
  { "Zathura",                    NULL,       NULL,       1 << 3,       False,       -1 },
  { "Cockatrice",                 NULL,       NULL,       1 << 6,       False,       -1 },
  { "Gimp",                       NULL,       NULL,       1 << 7,       False,       -1 },
  { "Darktable",                  NULL,       NULL,       1 << 7,       False,       -1 },
  { "chromium-browser-chromium",  NULL,       NULL,       1 << 8,       False,       -1 }
};

/* COLORS */
#define NUMCOLORS         4
static const char colors[NUMCOLORS][MAXCOLORS][8] = {
    // border   foreground background
    { "#000033", "#dddddd", "#000033" },  // normal
    { "#000088", "#ffffff", "#000088" },  // selected
    { "#ff0000", "#000000", "#ffff00" },  // urgent/warning  (black on yellow)
    { "#ff0000", "#ffffff", "#ff0000" },  // error (white on red)
    // add more here
};

/* layout(s) */
static const float mfact     = 0.55; /* factor of master area size [0.05..0.95] */
static const int nmaster     = 2;    /* number of clients in master area */
/* static const int resizehints = 1;    /1* 1 means respect size hints in tiled resizals *1/ */
/* Move resizehint to false to save some border space */
static const Bool resizehints = False; /* True means respect size hints in tiled resizals */

static const Layout layouts[] = {
	/* symbol     arrange function */
	{ "[T]",      tile },    /* first entry is default */
	{ "[F]",      NULL },    /* no layout function means floating behavior */
	{ "[M]",      monocle },
};

/* key definitions */
/* Use logo (Mod4) key instead of alt (Mod1) key */
#define MODKEY Mod4Mask
#define TAGKEYS(KEY,TAG) \
	{ MODKEY,                       KEY,      view,           {.ui = 1 << TAG} }, \
	{ MODKEY|ControlMask,           KEY,      toggleview,     {.ui = 1 << TAG} }, \
	{ MODKEY|ShiftMask,             KEY,      tag,            {.ui = 1 << TAG} }, \
	{ MODKEY|ControlMask|ShiftMask, KEY,      toggletag,      {.ui = 1 << TAG} },

/* helper for spawning shell commands in the pre dwm-5.0 fashion */
#define SHCMD(cmd) { .v = (const char*[]){ "/bin/sh", "-c", cmd, NULL } }

/* commands */
static char dmenumon[2]               = "0"; /* component of dmenucmd, manipulated in spawn() */
static const char *dmenucmd[]         = { "dmenu_run", "-m", dmenumon, "-fn", dmenufont, "-nb", normbgcolor, "-nf", normfgcolor, "-sb", selbgcolor, "-sf", selfgcolor, NULL };
static const char *termcmd[]          = { "urxvt", NULL };
static const char *backlightdowncmd[] = { "xbacklight", "-dec", "10", NULL };
static const char *backlightupcmd[]   = { "xbacklight", "-inc", "10", NULL };
static const char *soundlowercmd[]    = { "pactl", "set-sink-volume", "@DEFAULT_SINK@", "-10%", NULL };
static const char *soundraisecmd[]    = { "pactl", "set-sink-volume", "@DEFAULT_SINK@", "+10%", NULL };
static const char *soundmutecmd[]     = { "pactl", "set-sink-mute",   "@DEFAULT_SINK@", "toggle", NULL };
static const char *micmutecmd[]       = { "pactl", "set-source-mute", "2",              "toggle", NULL };
static const char *endlockcmd[]       = { "bash", "/home/gseren/src/free/github/guillaumeseren/i3lock-wrapper/i3lock_wrapper.sh", NULL };

#include "selfrestart.c"

static Key keys[] = {
	/* modifier                     key        function        argument */
	{ MODKEY,                       XK_p|XK_r, spawn,          {.v = dmenucmd } },
	{ MODKEY|ShiftMask,             XK_Return, spawn,          {.v = termcmd }},
/* (keysym 0x1008ff2d, XF86ScreenSaver) */
	{ 0,                            0x1008ff2d,spawn,          {.v = endlockcmd } },
/* (keysym 0x1008ff03, XF86MonBrightnessDown) */
	{ 0,                            0x1008ff03,spawn,          {.v = backlightdowncmd } },
/* (keysym 0x1008ff02, XF86MonBrightnessUp) */
	{ 0,                            0x1008ff02,spawn,          {.v = backlightupcmd } },
/* (keysym 0x1008ff12, XF86AudioMute) */
	{ 0,                            0x1008ff12,spawn,          {.v = soundmutecmd } },
/* (keysym 0x1008ff11, XF86AudioLowerVolume) */
	{ 0,                            0x1008ff11,spawn,          {.v = soundlowercmd } },
/* (keysym 0x1008ff13, XF86AudioRaiseVolume) */
	{ 0,                            0x1008ff13,spawn,          {.v = soundraisecmd } },
/* (keysym 0x1008ffb2, XF86AudioMicMute) */
	{ 0,                            0x1008ffb2,spawn,          {.v = micmutecmd } },
	{ MODKEY,                       XK_b,      togglebar,      {0} },
	{ MODKEY,                       XK_j,      focusstack,     {.i = +1 } },
	{ MODKEY,                       XK_k,      focusstack,     {.i = -1 } },
	{ MODKEY,                       XK_i,      incnmaster,     {.i = +1 } },
	{ MODKEY,                       XK_d,      incnmaster,     {.i = -1 } },
	{ MODKEY,                       XK_h,      setmfact,       {.f = -0.05} },
	{ MODKEY,                       XK_l,      setmfact,       {.f = +0.05} },
	{ MODKEY,                       XK_Return, zoom,           {0} },
	{ MODKEY,                       XK_Tab,    view,           {0} },
	{ MODKEY|ShiftMask,             XK_c,      killclient,     {0} },
	{ MODKEY,                       XK_t,      setlayout,      {.v = &layouts[0]} },
	{ MODKEY,                       XK_f,      setlayout,      {.v = &layouts[1]} },
	{ MODKEY,                       XK_m,      setlayout,      {.v = &layouts[2]} },
	{ MODKEY,                       XK_space,  setlayout,      {0} },
	{ MODKEY|ShiftMask,             XK_space,  togglefloating, {0} },
	{ MODKEY,                       XK_0,      view,           {.ui = ~0 } },
	{ MODKEY|ShiftMask,             XK_0,      tag,            {.ui = ~0 } },
	{ MODKEY,                       XK_comma,  focusmon,       {.i = -1 } },
	{ MODKEY,                       XK_period, focusmon,       {.i = +1 } },
	{ MODKEY|ShiftMask,             XK_comma,  tagmon,         {.i = -1 } },
	{ MODKEY|ShiftMask,             XK_period, tagmon,         {.i = +1 } },
	TAGKEYS(                        XK_1,                      0)
	TAGKEYS(                        XK_2,                      1)
	TAGKEYS(                        XK_3,                      2)
	TAGKEYS(                        XK_4,                      3)
	TAGKEYS(                        XK_5,                      4)
	TAGKEYS(                        XK_6,                      5)
	TAGKEYS(                        XK_7,                      6)
	TAGKEYS(                        XK_8,                      7)
	TAGKEYS(                        XK_9,                      8)
	{ MODKEY|ShiftMask,             XK_r,      self_restart,   {0} },
	{ MODKEY|ShiftMask,             XK_q,      quit,           {0} },
};

/* button definitions */
/* click can be ClkLtSymbol, ClkStatusText, ClkWinTitle, ClkClientWin, or ClkRootWin */
static Button buttons[] = {
	/* click                event mask      button          function        argument */
	{ ClkLtSymbol,          0,              Button1,        setlayout,      {0} },
	{ ClkLtSymbol,          0,              Button3,        setlayout,      {.v = &layouts[2]} },
	{ ClkWinTitle,          0,              Button1,        focusonclick,   {0} },
	{ ClkWinTitle,          0,              Button2,        zoom,           {0} },
	{ ClkStatusText,        0,              Button2,        spawn,          {.v = termcmd } },
	{ ClkClientWin,         MODKEY,         Button1,        movemouse,      {0} },
	{ ClkClientWin,         MODKEY,         Button2,        togglefloating, {0} },
	{ ClkClientWin,         MODKEY,         Button3,        resizemouse,    {0} },
	{ ClkTagBar,            0,              Button1,        view,           {0} },
	{ ClkTagBar,            0,              Button3,        toggleview,     {0} },
	{ ClkTagBar,            MODKEY,         Button1,        tag,            {0} },
	{ ClkTagBar,            MODKEY,         Button3,        toggletag,      {0} },
};

/* vim: set ft=c ts=2 sw=2 tw=80 foldmethod=marker et :*/
